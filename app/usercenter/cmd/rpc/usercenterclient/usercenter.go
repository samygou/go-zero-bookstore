// Code generated by goctl. DO NOT EDIT.
// Source: usercenter.proto

package usercenterclient

import (
	"context"

	"go-zero-bookstore/app/usercenter/cmd/rpc/usercenter"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ExistUserByMobileReq  = usercenter.ExistUserByMobileReq
	ExistUserByMobileResp = usercenter.ExistUserByMobileResp
	ExistUserByUserIdReq  = usercenter.ExistUserByUserIdReq
	ExistUserByUserIdResp = usercenter.ExistUserByUserIdResp
	GenerateTokenReq      = usercenter.GenerateTokenReq
	GenerateTokenResp     = usercenter.GenerateTokenResp
	GetUserByMobileReq    = usercenter.GetUserByMobileReq
	GetUserByMobileResp   = usercenter.GetUserByMobileResp
	GetUserInfoReq        = usercenter.GetUserInfoReq
	GetUserInfoResp       = usercenter.GetUserInfoResp
	LoginReq              = usercenter.LoginReq
	LoginResp             = usercenter.LoginResp
	RegisterReq           = usercenter.RegisterReq
	RegisterResp          = usercenter.RegisterResp
	UpdateUserReq         = usercenter.UpdateUserReq
	UpdateUserResp        = usercenter.UpdateUserResp
	User                  = usercenter.User
	UserAuth              = usercenter.UserAuth

	Usercenter interface {
		Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
		GetUserByMobile(ctx context.Context, in *GetUserByMobileReq, opts ...grpc.CallOption) (*GetUserByMobileResp, error)
		UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
		ExistUserByUserId(ctx context.Context, in *ExistUserByUserIdReq, opts ...grpc.CallOption) (*ExistUserByUserIdResp, error)
		ExistUserByMobile(ctx context.Context, in *ExistUserByMobileReq, opts ...grpc.CallOption) (*ExistUserByMobileResp, error)
		GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error)
	}

	defaultUsercenter struct {
		cli zrpc.Client
	}
)

func NewUsercenter(cli zrpc.Client) Usercenter {
	return &defaultUsercenter{
		cli: cli,
	}
}

func (m *defaultUsercenter) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := usercenter.NewUsercenterClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultUsercenter) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := usercenter.NewUsercenterClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	client := usercenter.NewUsercenterClient(m.cli.Conn())
	return client.GetUserInfo(ctx, in, opts...)
}

func (m *defaultUsercenter) GetUserByMobile(ctx context.Context, in *GetUserByMobileReq, opts ...grpc.CallOption) (*GetUserByMobileResp, error) {
	client := usercenter.NewUsercenterClient(m.cli.Conn())
	return client.GetUserByMobile(ctx, in, opts...)
}

func (m *defaultUsercenter) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	client := usercenter.NewUsercenterClient(m.cli.Conn())
	return client.UpdateUser(ctx, in, opts...)
}

func (m *defaultUsercenter) ExistUserByUserId(ctx context.Context, in *ExistUserByUserIdReq, opts ...grpc.CallOption) (*ExistUserByUserIdResp, error) {
	client := usercenter.NewUsercenterClient(m.cli.Conn())
	return client.ExistUserByUserId(ctx, in, opts...)
}

func (m *defaultUsercenter) ExistUserByMobile(ctx context.Context, in *ExistUserByMobileReq, opts ...grpc.CallOption) (*ExistUserByMobileResp, error) {
	client := usercenter.NewUsercenterClient(m.cli.Conn())
	return client.ExistUserByMobile(ctx, in, opts...)
}

func (m *defaultUsercenter) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...grpc.CallOption) (*GenerateTokenResp, error) {
	client := usercenter.NewUsercenterClient(m.cli.Conn())
	return client.GenerateToken(ctx, in, opts...)
}
