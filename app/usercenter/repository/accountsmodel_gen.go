// Code generated by goctl. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accountsFieldNames          = builder.RawFieldNames(&Accounts{})
	accountsRows                = strings.Join(accountsFieldNames, ",")
	accountsRowsExpectAutoSet   = strings.Join(stringx.Remove(accountsFieldNames, "`id`"), ",")
	accountsRowsWithPlaceHolder = strings.Join(stringx.Remove(accountsFieldNames, "`id`", "create_time", "create_at"), "=?,") + "=?"

	cacheAccountsIdPrefix     = "cache:accounts:id:"
	cacheAccountsMobilePrefix = "cache:accounts:mobile:"
)

type (
	accountsModel interface {
		Insert(ctx context.Context, data *Accounts) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Accounts, error)
		FindOneByMobile(ctx context.Context, mobile string) (*Accounts, error)
		Update(ctx context.Context, data *Accounts) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAccountsModel struct {
		sqlc.CachedConn
		table string
	}

	Accounts struct {
		Id         int64  `db:"id"`          // 主键id
		CreateTime int64  `db:"create_time"` // 创建时间
		UpdateTime int64  `db:"update_time"` // 更新时间
		DelStatus  int64  `db:"del_status"`  // 状态, 0正常, 1删除
		Mobile     string `db:"mobile"`      // 手机号
		Username   string `db:"username"`    // 用户名
		Password   string `db:"password"`    // 密码
		Sex        int64  `db:"sex"`         // 性别, 0未知, 1男, 2女
		Avatar     string `db:"avatar"`      // 头像
		Remark     string `db:"remark"`      // 备注信息
	}
)

func newAccountsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultAccountsModel {
	return &defaultAccountsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`accounts`",
	}
}

func (m *defaultAccountsModel) withSession(session sqlx.Session) *defaultAccountsModel {
	return &defaultAccountsModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`accounts`",
	}
}

func (m *defaultAccountsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	accountsIdKey := fmt.Sprintf("%s%v", cacheAccountsIdPrefix, id)
	accountsMobileKey := fmt.Sprintf("%s%v", cacheAccountsMobilePrefix, data.Mobile)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, accountsIdKey, accountsMobileKey)
	return err
}

func (m *defaultAccountsModel) FindOne(ctx context.Context, id int64) (*Accounts, error) {
	accountsIdKey := fmt.Sprintf("%s%v", cacheAccountsIdPrefix, id)
	var resp Accounts
	err := m.QueryRowCtx(ctx, &resp, accountsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accountsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountsModel) FindOneByMobile(ctx context.Context, mobile string) (*Accounts, error) {
	accountsMobileKey := fmt.Sprintf("%s%v", cacheAccountsMobilePrefix, mobile)
	var resp Accounts
	err := m.QueryRowIndexCtx(ctx, &resp, accountsMobileKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `mobile` = ? limit 1", accountsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, mobile); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountsModel) Insert(ctx context.Context, data *Accounts) (sql.Result, error) {
	accountsIdKey := fmt.Sprintf("%s%v", cacheAccountsIdPrefix, data.Id)
	accountsMobileKey := fmt.Sprintf("%s%v", cacheAccountsMobilePrefix, data.Mobile)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, accountsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.DelStatus, data.Mobile, data.Username, data.Password, data.Sex, data.Avatar, data.Remark)
	}, accountsIdKey, accountsMobileKey)
	return ret, err
}

func (m *defaultAccountsModel) Update(ctx context.Context, newData *Accounts) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	accountsIdKey := fmt.Sprintf("%s%v", cacheAccountsIdPrefix, data.Id)
	accountsMobileKey := fmt.Sprintf("%s%v", cacheAccountsMobilePrefix, data.Mobile)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, accountsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.DelStatus, newData.Mobile, newData.Username, newData.Password, newData.Sex, newData.Avatar, newData.Remark, newData.Id)
	}, accountsIdKey, accountsMobileKey)
	return err
}

func (m *defaultAccountsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheAccountsIdPrefix, primary)
}

func (m *defaultAccountsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", accountsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAccountsModel) tableName() string {
	return m.table
}
